/*
 * Copyright Matt Palmer 2012 All rights reserved.
 *
 * This code is licensed under a standard 3-clause BSD license:
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 *  * Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 *  * The names of its contributors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
 This text describes the structure of the abstract syntax trees, represented by the 
 ParseTree interface using the built-in ParseTreeType types.  
 
 There are two main types of ParseTree nodes: leaf nodes, which have values and structural
 nodes, which have no direct value but do have child ParseTrees.
 
 Value-carrying ParseTrees:
 ---------------------------
 
 	ANY						Matches any byte.
 
 The following types can be flagged as being inverted.
	 
 	BYTE					Has a single byte value
	ALL_BITMASK				Has a single byte value, used to compare against all of its bits.
	ANY_BITMASK				Has a single byte value, used to compare against any of its bits.
	SET						A set of byte values.
	
	
	CASE_SENSITIVE_STRING	Defines a string from which bytes are 
	CASE_INSENSITIVE_STRING Matches the bytes in the string ... ?
	
	
	RANGE					Defines a range of byte values. 
	SEQUENCE
	REPEAT
	INTEGER
	ALT
	MANY
	ONE_TO_MANY
	OPTIONAL
	
	